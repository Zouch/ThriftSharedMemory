// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Hello.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TSimpleServer.h>

#include <iostream>
#include <chrono>
#include <thread>

#include <boost/interprocess/shared_memory_object.hpp>
#include <boost/interprocess/managed_shared_memory.hpp>

#include "../transport.cpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::hello;
using namespace boost::interprocess;

class HelloHandler : virtual public HelloIf
{
public:
	HelloHandler() {}

	void echo(const std::string& msg)
	{
		printf("%s\n", msg.c_str());
	}

	int32_t add(const int32_t a, const int32_t b)
	{
		printf("add\n");
		return a + b;
	}

	int32_t mul(const int32_t a, const int32_t b)
	{
		printf("mul\n");
		return a * b;
	}
};

class TMemoryBufferFactory : public TTransportFactory
{
public:
	TMemoryBufferFactory() {}
	virtual ~TMemoryBufferFactory() {}

	virtual stdcxx::shared_ptr<TTransport> getTransport(stdcxx::shared_ptr<TTransport> trans)
	{
		return stdcxx::make_shared<TMemoryBuffer>();
	}
};

int main(int argc, char** argv)
{
	struct shm_remove {
		shm_remove()
		{
			shared_memory_object::remove("shared_memory");
		}
		~shm_remove()
		{
			shared_memory_object::remove("shared_memory");
		}
	} remover;

	shared_memory_object shm(create_only, "shared_memory", read_write);
	shm.truncate(1024);

	mapped_region region(shm, read_write);

	char* mem = static_cast<char*>(region.get_address());
	std::memset(mem, 0, region.get_size());
	std::strcpy(mem, "hello, world");

	// while (*mem != 0) {
	// 	std::this_thread::sleep_for(std::chrono::seconds(1));
	// }

	// std::cout << "Read a 0 !\n";

	int  port      = 4242;
	auto handler   = stdcxx::make_shared<HelloHandler>();
	auto processor = stdcxx::make_shared<HelloProcessor>(handler);
	// auto serverTransport  = stdcxx::make_shared<TServerSocket>(port);
	auto serverTransport  = stdcxx::make_shared<MyServerTransport>();
	auto transportFactory = stdcxx::make_shared<TBufferedTransportFactory>();
	auto protocolFactory  = stdcxx::make_shared<TBinaryProtocolFactory>();

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();

	return 0;
}
